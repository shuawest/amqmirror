<?xml version='1.0'?>
<configuration xmlns="urn:activemq"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xmlns:xi="http://www.w3.org/2001/XInclude"
               xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">

   <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="urn:activemq:core ">

      <name>{{broker_name}}</name>


      <persistence-enabled>{{broker_persistenceEnabled}}</persistence-enabled>

      <!-- this could be ASYNCIO, MAPPED, NIO
           ASYNCIO: Linux Libaio
           MAPPED: mmap files
           NIO: Plain Java Files
       -->
      <journal-type>{{broker_journalType}}</journal-type>

      <paging-directory>{{broker_data_dir}}/paging</paging-directory>
      <bindings-directory>{{broker_data_dir}}/bindings</bindings-directory>
      <journal-directory>{{broker_data_dir}}/journal</journal-directory>
      <large-messages-directory>{{broker_data_dir}}/large-messages</large-messages-directory>

      <journal-datasync>{{broker_journalDatasync}}</journal-datasync>

      <journal-min-files>{{broker_journalMinFiles}}</journal-min-files>
      <journal-pool-files>{{broker_journalPoolFiles}}</journal-pool-files>

      <journal-device-block-size>{{broker_journalDeviceBlockSize}}</journal-device-block-size>

      <journal-file-size>{{broker_journalFileSize}}</journal-file-size>
      
      <!--
       This value was determined through a calculation.
       Your system could perform 50 writes per millisecond
       on the current journal configuration.
       That translates as a sync write every 20000 nanoseconds.

       Note: If you specify 0 the system will perform writes directly to the disk.
             We recommend this to be 0 if you are using journalType=MAPPED and journal-datasync=false.
      -->
      <journal-buffer-timeout>{{broker_journalBufferTimeout}}</journal-buffer-timeout>


      <!--
        When using ASYNCIO, this will determine the writing queue depth for libaio.
       -->
      <journal-max-io>{{broker_journalMaxIo}}</journal-max-io>
      <!--
        You can verify the network health of a particular NIC by specifying the <network-check-NIC> element.
         <network-check-NIC>theNicName</network-check-NIC>
        -->

      <!--
        Use this to use an HTTP server to validate the network
         <network-check-URL-list>http://www.apache.org</network-check-URL-list> -->

      <!-- <network-check-period>10000</network-check-period> -->
      <!-- <network-check-timeout>1000</network-check-timeout> -->

      <!-- this is a comma separated list, no spaces, just DNS or IPs
           it should accept IPV6

           Warning: Make sure you understand your network topology as this is meant to validate if your network is valid.
                    Using IPs that could eventually disappear or be partially visible may defeat the purpose.
                    You can use a list of multiple IPs, and if any successful ping will make the server OK to continue running -->
      <!-- <network-check-list>10.0.0.1</network-check-list> -->

      <!-- use this to customize the ping used for ipv4 addresses -->
      <!-- <network-check-ping-command>ping -c 1 -t %d %s</network-check-ping-command> -->

      <!-- use this to customize the ping used for ipv6 addresses -->
      <!-- <network-check-ping6-command>ping6 -c 1 %2$s</network-check-ping6-command> -->


      <!-- how often we are looking for how many bytes are being used on the disk in ms -->
      <disk-scan-period>{{broker_diskScanPeriod}}</disk-scan-period>

      <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
           that won't support flow control. -->
      <max-disk-usage>{{broker_maxDiskUsage}}</max-disk-usage>

      <!-- should the broker detect dead locks and other issues -->
      <critical-analyzer>true</critical-analyzer>
      <critical-analyzer-timeout>120000</critical-analyzer-timeout>
      <critical-analyzer-check-period>60000</critical-analyzer-check-period>
      <critical-analyzer-policy>HALT</critical-analyzer-policy>

   
      <!--  The system will enter into page mode once you hit this limit.
            This is an estimate in bytes of how much the messages are using in memory -->
      <global-max-size>{{broker_globalMaxSize}}</global-max-size>
      <page-sync-timeout>{{broker_pageSyncTimeout}}</page-sync-timeout>

      <acceptors>
         <!-- Acceptor for every supported protocol 
         <acceptor name="artemis">tcp://{{broker_host}}:{{broker_core_port}}?tcpSendBufferSize={{tcpSendBufferSize}};tcpReceiveBufferSize={{tcpReceiveBufferSize}};amqpMinLargeMessageSize=102400;protocols=CORE,AMQP;useEpoll=true;amqpCredits={{amqpCredits}};amqpLowCredits={{amqpLowCredits}};amqpDuplicateDetection=false</acceptor>
         -->
         <!-- AMQP Acceptor.  Listens on default AMQP port for AMQP traffic.-->
         <acceptor name="amqp">tcp://{{broker_host}}:{{broker_instance.amqp_port}}?tcpSendBufferSize={{broker_tcpSendBufferSize}};tcpReceiveBufferSize={{broker_tcpReceiveBufferSize}};protocols=AMQP;useEpoll=true;amqpCredits={{broker_amqpCredits}};amqpLowCredits={{broker_amqpLowCredits}};amqpMinLargeMessageSize=102400;amqpDuplicateDetection=false</acceptor>
         <acceptor name="cluster">{{broker_instance.cluster_addr}}?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=CORE;useEpoll=true;amqpCredits=1000;amqpLowCredits=300</acceptor>         
      </acceptors>

      <connectors>
         <!-- Connector used to be announced through cluster connections and notifications -->
         {# <connector name="artemis">tcp://{{broker_host}}:{{broker_core_port}}</connector>     #}
         <connector name="cluster-local">{{broker_instance.cluster_addr}}</connector>            
         {% for peer in peer_instances %}
         <connector name="conn-{{peer}}">{{battery.brokercluster.instances[peer].cluster_addr}}</connector>    
         {% endfor %}
      </connectors>

      <cluster-user>{{broker_cluster_user}}</cluster-user>
      <cluster-password>{{broker_cluster_pass}}</cluster-password>

      <cluster-connections>
         <cluster-connection name="sharedstore-cluster">
            <connector-ref>cluster-local</connector-ref>
            <message-load-balancing>ON_DEMAND</message-load-balancing>
            <max-hops>10</max-hops>
            <static-connectors>
               {% for peer in peer_instances %}
               <connector-ref>conn-{{peer}}</connector-ref>
               {% endfor %}
            </static-connectors>
         </cluster-connection>
      </cluster-connections>

      <ha-policy>
         <shared-store>
            {% if broker_instance.role == 'master' %}
            <master>
               <failover-on-shutdown>true</failover-on-shutdown>
            </master>
            {% endif %}
            {% if broker_instance.role == 'slave' %}
            <slave>
               <failover-on-shutdown>true</failover-on-shutdown>
               <allow-failback>true</allow-failback>
               <restart-backup>true</restart-backup>
            </slave>
            {% endif %}
         </shared-store>
      </ha-policy>

      <security-settings>
         <security-setting match="#">
            <permission type="createNonDurableQueue" roles="amq"/>
            <permission type="deleteNonDurableQueue" roles="amq"/>
            <permission type="createDurableQueue" roles="amq"/>
            <permission type="deleteDurableQueue" roles="amq"/>
            <permission type="createAddress" roles="amq"/>
            <permission type="deleteAddress" roles="amq"/>
            <permission type="consume" roles="amq"/>
            <permission type="browse" roles="amq"/>
            <permission type="send" roles="amq"/>
            <!-- we need this otherwise ./artemis data imp wouldn't work -->
            <permission type="manage" roles="amq"/>
         </security-setting>
      </security-settings>

      <address-settings>
         <!-- if you define auto-create on certain queues, management has to be auto-create -->
         <address-setting match="activemq.management#">
            <dead-letter-address>DLQ</dead-letter-address>
            <expiry-address>ExpiryQueue</expiry-address>
            <redelivery-delay>0</redelivery-delay>
            <!-- with -1 only the global-max-size is in use for limiting -->
            <max-size-bytes>-1</max-size-bytes>
            <message-counter-history-day-limit>10</message-counter-history-day-limit>
            <address-full-policy>BLOCK</address-full-policy>
            <auto-create-queues>true</auto-create-queues>
            <auto-create-addresses>true</auto-create-addresses>
            <auto-create-jms-queues>true</auto-create-jms-queues>
            <auto-create-jms-topics>true</auto-create-jms-topics>
         </address-setting>
         <!--default for catch all-->
         <address-setting match="#">
            <dead-letter-address>DLQ</dead-letter-address>
            <expiry-address>ExpiryQueue</expiry-address>
            <redelivery-delay>0</redelivery-delay>
            <!-- with -1 only the global-max-size is in use for limiting -->
            <max-size-bytes>-1</max-size-bytes>
            <message-counter-history-day-limit>10</message-counter-history-day-limit>
            <address-full-policy>BLOCK</address-full-policy>
            <auto-create-queues>true</auto-create-queues>
            <auto-create-addresses>true</auto-create-addresses>
            <auto-create-jms-queues>true</auto-create-jms-queues>
            <auto-create-jms-topics>true</auto-create-jms-topics>

            <!-- added tuning variables --> 
            {# <default-consumer-window-size>10000</default-consumer-window-size> #}

         </address-setting>
      </address-settings>

      <addresses>
         <address name="DLQ">
            <anycast>
               <queue name="DLQ" />
            </anycast>
         </address>
         <address name="ExpiryQueue">
            <anycast>
               <queue name="ExpiryQueue" />
            </anycast>
         </address>
      </addresses>


      <!-- Uncomment the following if you want to use the Standard LoggingActiveMQServerPlugin pluging to log in events
      <broker-plugins>
         <broker-plugin class-name="org.apache.activemq.artemis.core.server.plugin.impl.LoggingActiveMQServerPlugin">
            <property key="LOG_ALL_EVENTS" value="true"/>
            <property key="LOG_CONNECTION_EVENTS" value="true"/>
            <property key="LOG_SESSION_EVENTS" value="true"/>
            <property key="LOG_CONSUMER_EVENTS" value="true"/>
            <property key="LOG_DELIVERING_EVENTS" value="true"/>
            <property key="LOG_SENDING_EVENTS" value="true"/>
            <property key="LOG_INTERNAL_EVENTS" value="true"/>
         </broker-plugin>
      </broker-plugins>
      -->

   </core>
</configuration>
